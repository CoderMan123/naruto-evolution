variables:
  PROJECT_DME: "naruto-evolution.dme"
  PROJECT_VERSION: ""
  PROJECT_MAJOR_VERSION: ""
  PROJECT_MINOR_VERSION: ""
  PROJECT_PATCH_VERSION: ""
  PROJECT_PRERELEASE: 0
  PROJECT_DOCKER_MANIFEST_EXISTS: 0
  BYOND_IMAGE: "douglasparker/byond"
  BYOND_VERSION: "514.1589"
  BYOND_MAJOR_VERSION: ""
  BYOND_MINOR_VERSION: ""
  GIT_SUBMODULE_STRATEGY: recursive

build:
  image: i386/ubuntu:18.04
  stage: build
  only:
    - main
    - dev
    - tags
    - merge_requests
    - triggers
  artifacts:
    reports:
      dotenv: build.env
  cache:
    key: "$CI_PIPELINE_ID"
    policy: push
    paths:
      - "$CI_PROJECT_DIR/naruto-evolution.dmb"
      - "$CI_PROJECT_DIR/naruto-evolution.rsc"
  before_script:
    - |
      BYOND_MAJOR_VERSION="$(echo "$(cut -d '.' -f 1 <(echo "$BYOND_VERSION"))")"
      echo "BYOND_MAJOR_VERSION=$BYOND_MAJOR_VERSION" >> build.env
      BYOND_MINOR_VERSION="$(echo "$(cut -d '.' -f 2 <(echo "$BYOND_VERSION"))")"
      echo "BYOND_MINOR_VERSION=$BYOND_MINOR_VERSION" >> build.env

      apt-get update
      apt-get install -y curl unzip make libstdc++6
      curl "http://www.byond.com/download/build/${BYOND_MAJOR_VERSION}/${BYOND_VERSION}_byond_linux.zip" -o byond.zip
      unzip byond.zip
      cd byond
      sed -i 's|install:|&\n\tmkdir -p $(MAN_DIR)/man6|' Makefile
      make install
      apt-get purge -y --auto-remove curl unzip make
      cd ..
      rm -rf byond byond.zip /var/lib/apt/lists/*

  script:
    - |
      echo "Building $CI_PROJECT_NAME..."
      DreamMaker "$CI_PROJECT_DIR/naruto-evolution.dme"

docker-build:
  image: docker:20
  stage: build
  needs: ["build"]
  only:
    - tags
  cache:
    key: "$CI_PIPELINE_ID"
    policy: pull-push
    paths:
      - "$CI_PROJECT_DIR/naruto-evolution.dmb"
      - "$CI_PROJECT_DIR/naruto-evolution.rsc"
      - "$CI_PROJECT_DIR/docker.tar"
  before_script:
    - |
      apk update
      apk add curl
  script:
    - |
      PROJECT_VERSION="$CI_COMMIT_TAG"
      echo "$PROJECT_VERSION" > "$CI_PROJECT_DIR/VERSION"
      (echo "$PROJECT_VERSION" | grep -q "-") && [ $? -eq 0 ] && echo "PRERELEASE" > "$CI_PROJECT_DIR/PRERELEASE"; PROJECT_PRERELEASE=1
      PROJECT_MAJOR_VERSION="$(echo "$(cut -d '.' -f 1 <(echo "$PROJECT_VERSION"))")"
      PROJECT_MINOR_VERSION="$(echo "$(cut -d '.' -f 2 <(echo "$PROJECT_VERSION"))")"
      PROJECT_PATCH_VERSION="$(echo "$(cut -d '.' -f 3 <(echo "$PROJECT_VERSION"))")"
      echo "PROJECT_VERSION=$PROJECT_VERSION" >> build.env
      echo "PROJECT_MAJOR_VERSION=$PROJECT_MAJOR_VERSION" >> build.env
      echo "PROJECT_MINOR_VERSION=$PROJECT_MINOR_VERSION" >> build.env
      echo "PROJECT_PATCH_VERSION=$PROJECT_PATCH_VERSION" >> build.env

      echo "Logging into the DockerHub Registry..."
      docker login --username "$DOCKER_USERNAME" --password "$DOCKER_TOKEN"

      echo "Logging into the GitLab Container Registry..."
      docker login "$CI_REGISTRY" --username "$CI_REGISTRY_USER" --password "$CI_REGISTRY_PASSWORD"

      echo "Checking if this release was already published to the DockerHub Registry..."
      # Disable exit on error (non-zero exit code) to ensure pipelines don't fail when `docker manifest inspect` returns 0
      echo "Disabling exit on error (non-zero exit code)..."
      set +e
      docker manifest inspect "$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$PROJECT_VERSION"
      if [ $? -eq 0 ]; then
        echo "An existing tag was found!"
        PROJECT_DOCKER_MANIFEST_EXISTS=1
        echo "PROJECT_DOCKER_MANIFEST_EXISTS=$PROJECT_DOCKER_MANIFEST_EXISTS" >> build.env
      fi
      echo "Enabling exit on error (non-zero exit code)..."
      set -e

      echo "Building the Docker images..."
      if [ $PROJECT_PRERELEASE -eq 0 ]; then
        docker build \
          -t "$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:latest" \
          -t "$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$PROJECT_VERSION" \
          -t "$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$PROJECT_MAJOR_VERSION" \
          -t "$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$PROJECT_MAJOR_VERSION.$PROJECT_MINOR_VERSION" \
          -t "$CI_REGISTRY_IMAGE:latest" \
          -t "$CI_REGISTRY_IMAGE:$PROJECT_VERSION" \
          -t "$CI_REGISTRY_IMAGE:$PROJECT_MAJOR_VERSION" \
          -t "$CI_REGISTRY_IMAGE:$PROJECT_MAJOR_VERSION.$PROJECT_MINOR_VERSION" \
          .
        
        echo "Saving the Docker images..."
        docker save --output "$CI_PROJECT_DIR/docker.tar" \
          "$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:latest" \
          "$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$PROJECT_VERSION" \
          "$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$PROJECT_MAJOR_VERSION" \
          "$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$PROJECT_MAJOR_VERSION.$PROJECT_MINOR_VERSION" \
          "$CI_REGISTRY_IMAGE:latest" \
          "$CI_REGISTRY_IMAGE:$PROJECT_VERSION" \
          "$CI_REGISTRY_IMAGE:$PROJECT_MAJOR_VERSION" \
          "$CI_REGISTRY_IMAGE:$PROJECT_MAJOR_VERSION.$PROJECT_MINOR_VERSION"
      else
        docker build \
          -t "$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$PROJECT_VERSION" \
          -t "$CI_REGISTRY_IMAGE:$PROJECT_VERSION" \
          .
        
        echo "Saving the Docker images..."
        docker save --output "$CI_PROJECT_DIR/docker.tar" \
          "$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$PROJECT_VERSION" \
          "$CI_REGISTRY_IMAGE:$PROJECT_VERSION" \
      fi

publish:
  image: docker:20
  stage: build
  needs: ["docker-build"]
  only:
    - tags
  cache:
    key: "$CI_PIPELINE_ID"
    policy: pull
    paths:
      - "$CI_PROJECT_DIR/docker.tar"
  script:
    - |
      if [ "$PROJECT_DOCKER_MANIFEST_EXISTS" -eq 0 ]; then
        echo "Logging into the DockerHub Registry..."
        docker login --username "$DOCKER_USERNAME" --password "$DOCKER_TOKEN"

        echo "Logging into the GitLab Container Registry..."
        docker login "$CI_REGISTRY" --username "$CI_REGISTRY_USER" --password "$CI_REGISTRY_PASSWORD"

        echo "Loading the Docker images..."
        docker load --input "$CI_PROJECT_DIR/docker.tar"

        echo "Publishing the Docker images to the Docker Registry..."
        docker push --all-tags "$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME"

        echo "Publishing the Docker images to the GitLab Container Registry..."
        docker push --all-tags "$CI_REGISTRY_IMAGE"
      else
        echo "This docker image already exists in the Docker Registry..."
        echo "The publish job has been skipped."
      fi

release:
  image: ubuntu:22.04
  stage: deploy
  needs: ["publish"]
  only:
    - tags
  before_script:
    - |
      apt-get update
      apt-get install sshpass -y
  script:
    - |
      sshpass -p "$SSH_PASSWORD" ssh $SSH_USERNAME@$SSH_HOST \
        "docker run --rm \
          -v /var/run/docker.sock:/var/run/docker.sock \
          -v /root/.docker/config.json:/config.json:ro \
          -e WATCHTOWER_NOTIFICATIONS=slack \
          -e WATCHTOWER_NOTIFICATION_SLACK_IDENTIFIER="Watchtower" \
          -e WATCHTOWER_NOTIFICATION_SLACK_HOOK_URL="${{ secrets.WATCHTOWER_NOTIFICATION_SLACK_HOOK_URL }}" \
          containrrr/watchtower naruto-evolution --run-once --cleanup --include-restarting"